package ch.aoz.maps;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.HashMap;
import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.FetchOptions;
import com.google.appengine.api.datastore.KeyFactory;
import com.google.appengine.api.datastore.Query;
import com.google.appengine.api.datastore.Query.Filter;
import com.google.appengine.api.datastore.Query.FilterPredicate;
import com.google.appengine.api.datastore.Query.FilterOperator;

/**
 * TODO: Insert description here. (generated by tobulogic)
 */
public class Translator {
  public static final String entityKind = "Translator";
  
  private final String email;
  public static final String emailProperty = "email";

  private final String name;
  public static final String nameProperty = "name";

  private final List<String> languages;
  public static final String languagesProperty = "languages";
  
  private final boolean ok;
  
  public Translator(String email, String name, List<String> languages) {
    this.email = email;
    this.name = name;
    this.languages = languages;
    boolean languagesOk = (languages != null && languages.size() > 0);
    if (languagesOk) {
      for (String lang : languages) {
        if (lang.length() != 2) {
          languagesOk = false;
          break;
        }
      }
    }
    this.ok = (email != null && name != null && languagesOk);
  }
  
  @SuppressWarnings("unchecked")
  public Translator(Entity entity) {
    boolean ok = true;
    if (entity.hasProperty(emailProperty)) {
      email = (String)entity.getProperty(emailProperty);
    } else {
      email = "";
      ok = false;
    }
    if (entity.hasProperty(nameProperty)) {
      name = (String)entity.getProperty(nameProperty);
    } else {
      name = "";
      ok = false;
    }
    if (entity.hasProperty(languagesProperty)) {
      languages = (List<String>)entity.getProperty(languagesProperty);
      if (languages.size() == 0) {
        ok = false;
      } else {
        for (String lang : languages) {
          if (lang.length() != 2) {
            ok = false;
          }
        }
      }
    } else {
      languages = new ArrayList<String>();
      ok = false;
    }
    this.ok = ok;
  }

  public static HashMap<String, Translator> getAllTranslators() {
    HashMap<String, Translator> translators = new HashMap<String, Translator>();
    
    DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
    Query query = new Query(entityKind);
    List<Entity> entities = 
        datastore.prepare(query).asList(FetchOptions.Builder.withDefaults());
    for (Entity e : entities) {
      Translator t = new Translator(e);
      translators.put(t.getEmail(), t);
    }
    return translators;
  }
  
  public static boolean AddTranslator(Translator t) {
    if (!t.isOk())
      return false;
    Entity e = new Entity(entityKind, t.getEmail());
    e.setProperty(emailProperty, t.getEmail());
    e.setProperty(nameProperty, t.getName());    
    e.setProperty(languagesProperty, t.getLanguages());
    
    DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
    try {
      datastore.put(e);
    } catch (Exception ex) {
      return false;
    }
    return true;
  }
  
  public static boolean exists(String email) {
    Filter f = new FilterPredicate(
        Entity.KEY_RESERVED_PROPERTY, 
        FilterOperator.EQUAL,
        KeyFactory.createKey(entityKind, email));
    
    Query q = new Query(entityKind);
    q.setFilter(f);
    q.setKeysOnly();

    DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
    try {
      Entity e = datastore.prepare(q).asSingleEntity();
      return e != null;
    } catch (Exception ex) {
      return false;
    }
  }

  public String getLanguageString() {
    StringBuilder b = new StringBuilder();
    for (String lang : languages) {
      b.append(lang);
      b.append(",");
    }
    b.deleteCharAt(b.length() - 1);
    return b.toString();
  }

  public static List<String> parseLanguageString(String langs) { 
    if (langs == null)
      return new ArrayList<String>();
    List<String> list = Arrays.asList(langs.replace(" ", "").split(","));
    return list;
  }

  /**
   * @return the email
   */
  public String getEmail() {
    return email;
  }

  /**
   * @return the name
   */
  public String getName() {
    return name;
  }

  /**
   * @return the languages
   */
  public List<String> getLanguages() {
    return languages;
  }

  /**
   * @return the ok
   */
  public boolean isOk() {
    return ok;
  }
}
